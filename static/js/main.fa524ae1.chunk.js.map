{"version":3,"sources":["Body/Body.js","BootstrapComponents/Row.js","BootstrapComponents/Col.js","Header/Header.js","ImageCards/ImageCards.js","App.js","serviceWorker.js","index.js"],"names":["Body","props","react_default","a","createElement","className","style","children","Row","Col","concat","size","Header","justifyContent","width","height","points","ImageCards","display","alignItems","flexWrap","images","map","image","key","id","src","alt","data-value","value","onClick","App","state","shuffle","arr","i","j","temp","length","Math","floor","random","clickHandler","event","Object","toConsumableArray","_this","currentTarget","dataset","console","log","setState","_this2","this","src_Body_Body","flexDirection","BootstrapComponents_Row","backgroundColor","borderRadius","marginBottom","src_Header_Header","BootstrapComponents_Col","src_ImageCards_ImageCards","padding","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fa524ae1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Body = (props) => {\r\n    return (\r\n        <div className=\"container\" style={props.style}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Body;\r\n","import React from 'react';\r\n\r\nconst Row = (props) =>{\r\n    return (\r\n        <div className=\"row\" style={props.style}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row;","import React from 'react';\r\n\r\nconst Col = (props) =>{\r\n    return (\r\n        <div className={`col-${props.size}`}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Col;","import React from 'react';\r\n\r\nconst Header = (props) =>{\r\n    \r\n    \r\n\r\n    return (\r\n        <nav style={{justifyContent: \"center\", width:\"100%\", height:\"15%\"}}>\r\n            <h1>Click it</h1>\r\n            <p>\r\n            Score: {props.points}!\r\n            </p>\r\n            {props.points === 0 ? <p>Guess which picture has the point! guess wrong and loose all your points. </p> : <p>GAME ON</p>}\r\n            {props.children}\r\n        </nav>\r\n    )\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst ImageCards = (props) => {\r\n\r\n    return (\r\n        <div className=\"imageWrapper\" style={{width: \"100%\", display: \"flex\", alignItems:\"flex-start\", flexWrap: \"wrap\"}}>\r\n            {props.images.map(image => (\r\n                <div className=\"card\" key={image.id} style={props.style}>\r\n                    <img className=\"card-img\"  src={image.src} alt=\"Card cap\" data-value={image.value} onClick={props.onClick} />\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImageCards;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Body from './Body/Body';\nimport Row from './BootstrapComponents/Row';\nimport Col from './BootstrapComponents/Col';\nimport Header from './Header/Header';\nimport ImageCard from './ImageCards/ImageCards';\n\nclass App extends Component {\n  state = {\n    points: 0,\n    images: [\n      {\n        id: 1,\n        src: \"https://media.giphy.com/media/xUA7b2S7SxhM1cGdsQ/giphy.gif\",\n        value: 1,\n      },\n      {\n        id: 2,\n        src: \"https://media.giphy.com/media/xUA7b2S7SxhM1cGdsQ/giphy.gif\",\n        value: 0,\n      },\n      {\n        id: 3,\n        src: \"https://media.giphy.com/media/xUA7b2S7SxhM1cGdsQ/giphy.gif\",\n        value: 0,\n      },\n      {\n        id: 4,\n        src: \"https://media.giphy.com/media/xUA7b2S7SxhM1cGdsQ/giphy.gif\",\n        value: 0,\n      },\n      {\n        id: 5,\n        src: \"https://media.giphy.com/media/xUA7b2S7SxhM1cGdsQ/giphy.gif\",\n        value: 0,\n      },\n      {\n        id: 6,\n        src: \"https://media.giphy.com/media/xUA7b2S7SxhM1cGdsQ/giphy.gif\",\n        value: 0,\n      },\n      \n    ]\n  }\n\n  shuffle = (arr) => {\n    let i,\n        j,\n        temp;\n    for (i = arr.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n    return arr;    \n};\n\n  clickHandler = (event) =>{\n    let arr = [...this.state.images]\n    const value  = event.currentTarget.dataset.value\n    console.log(\"click\",  event.currentTarget.dataset.value)\n    \n    if(value == 1){\n      let points = this.state.points;\n      points += 1\n      console.log(\"point\")\n      this.setState({\n        points:points,\n        images:this.shuffle(arr)\n      })\n    } else this.setState({\n      points:0,\n      images:this.shuffle(arr)\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Body style={{display: \"flex\",flexDirection:\"row\", justifyContent: \"center\", flexWrap:\"wrap\"}}>\n          <Row style={{ width:\"100%\", height:\"15%\", backgroundColor:\"Coral\" ,borderRadius:\"1rem\", marginBottom: \"2rem\"}}>\n            <Header points={this.state.points}/>\n          </Row>\n          <Row style={{ width:\"100%\",backgroundColor:\"Goldenrod\"}}>\n            <Col size=\"md-10 offset-md-1\">\n                <ImageCard \n                images={this.state.images}\n                onClick={(event)=> this.clickHandler(event)}\n                style={{ width: \"15rem\", padding: \"1rem\" }} \n                />\n            </Col>\n          </Row>\n        </Body>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}